# -*- coding: utf-8 -*-
"""project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j0A9S4PrieI6vsLZcoUrnjuzM7hyM7UO
"""

import numpy as np
import pandas as pd
import math
import requests
import xlsxwriter
from scipy import stats

stonks = pd.read_csv("sp_500_stocks.csv")
from secrets import IEX_CLOUD_API_TOKEN

symbol = 'AAPL'
api_call = f'https://sandbox.iexapis.com/stable/stock/{symbol}/stats?token={IEX_CLOUD_API_TOKEN}'
data = requests.get(api_call).json()
data

def divide_chunks(l, n):
      
    # looping till length l
    for i in range(0, len(l), n): 
        yield l[i:i + n]
        
ticker_group = list(divide_chunks(stonks["Ticker"],100))
symbol_strings = []
for i in range(0,len(ticker_group)):
    symbol_strings.append(','.join(ticker_group[i]))

my_columns = ['Ticker','price', 'one year price return','stocks to buy']
output_dataframe = pd.DataFrame(columns = my_columns)
output_dataframe

for symbol_string in symbol_strings:
    batch_api_url = f'https://sandbox.iexapis.com/stable/stock/market/batch?symbols={symbol_string}&types=stats,price&token={IEX_CLOUD_API_TOKEN}'
    info = requests.get(batch_api_url).json()
    for symbol in symbol_string.split(','):
        output_dataframe = output_dataframe.append(
        pd.Series(
            [symbol,
             info[symbol]['price'],
             info[symbol]['stats']['year1ChangePercent'],
             'NA'  
            ],
            index = my_columns                                 
        ),
        ignore_index = True
        )
output_dataframe

output_dataframe.sort_values('one year price return',ascending=False,inplace=True)
output_dataframe = output_dataframe[:50]
output_dataframe.reset_index(inplace = True)
output_dataframe

def portfolio_input() : 
    global portfolio_size
    portfolio_size = input('enter your portfolio size in rupees')
    try :
        float(portfolio_size)
    except ValueError:
        portfolio_size = input('pls enter the value in integers')
    val = float(portfolio_size)
    
# StoksToBuy*Price = x(i)  sumx(i)=portfoliosize
# x(i) = portfolioSize*1yearreturn/sum(1yearreturn)
# total_return = output_dataframe['one year price return'].sum()
# for i in range(50) :
#     val = (float(portfolio_size)*output_dataframe.loc[i,'one year price return'])/total_return
#     output_dataframe.loc[i,'stocks to buy'] = math.floor(val/output_dataframe.loc[i,'price'])
    
# output_dataframe
portfolio_input()
# output_dataframe
weight = float(portfolio_size)/len(output_dataframe.index)
for i in range(0, len(output_dataframe)):
    output_dataframe.loc[i,'stocks to buy'] = math.floor(weight/output_dataframe.loc[i,'price'])
output_dataframe

"""high Quality momentum strategy

1 month 
3month
6 month
1 year price return
"""

hqm_columns = [
               'ticker',
               'price',
               '1 month return',
               '1 month return percentile',
               '3 month return',
               '3 month return percentile',
               '6 month return',
               '6 month return percentile',
               '1 year return',
               '1 year return percentile',
               'HQM score',
               'stocks to buy'               
              ]
hqm_final_dataframe = pd.DataFrame(columns = hqm_columns)


for symbol_string in symbol_strings:
    batch_api_call_url = f'https://sandbox.iexapis.com/stable/stock/market/batch?symbols={symbol_string}&types=stats,price&token={IEX_CLOUD_API_TOKEN}'
    data = requests.get(batch_api_call_url).json()   
    
    for symbol in symbol_string.split(','):
        
        hqm_final_dataframe=hqm_final_dataframe.append(
        pd.Series([
            symbol,
            data[symbol]['price'],
            data[symbol]['stats']['month1ChangePercent'],
            'Nan',
            data[symbol]['stats']['month3ChangePercent'],
            'Nan',
            data[symbol]['stats']['month6ChangePercent'],
            'Nan',
            data[symbol]['stats']['year1ChangePercent'],
            'Nan',
            'Nan',
            'Nan'
            ],
            index = hqm_columns
        ),
                 
        ignore_index = True
        
        )
        
hqm_final_dataframe

"""calculating momentum percentiles

"""

time_periods = ['1 month',
               '3 month',
               '6 month',
               '1 year',
               ]

for row in hqm_final_dataframe.index:
    for time_period in time_periods:
        return_col = f'{time_period} return'
        percentile_col = f'{time_period} return percentile'
        if hqm_final_dataframe.loc[row, return_col] == None:
            hqm_final_dataframe.loc[row, return_col] = 0.0
            
for row in hqm_final_dataframe.index:
    for time_period in time_periods:
        return_col = f'{time_period} return'
        percentile_col = f'{time_period} return percentile'
        hqm_final_dataframe.loc[row,percentile_col] = stats.percentileofscore(hqm_final_dataframe[return_col],hqm_final_dataframe.loc[row,return_col])

hqm_final_dataframe

from statistics import mean

for row in hqm_final_dataframe.index:
    momentum_percentiles = []
    for time_period in time_periods:
        momentum_percentiles.append(hqm_final_dataframe.loc[row, f'{time_period} return percentile'])
    hqm_final_dataframe.loc[row,'HQM score'] = mean(momentum_percentiles)

"""sort hqm scores in decreasing order"""

hqm_final_dataframe.sort_values('HQM score', ascending = False, inplace = True)
hqm_final_dataframe = hqm_final_dataframe[:50]
hqm_final_dataframe.reset_index(inplace = True, drop = True)

hqm_final_dataframe

portfolio_input()

position_size = float(portfolio_size)/len(hqm_final_dataframe.index)

for row in hqm_final_dataframe.index:
    hqm_final_dataframe.loc[row, 'stocks to buy'] = math.floor(position_size/hqm_final_dataframe.loc[row, 'price'])
    
hqm_final_dataframe

